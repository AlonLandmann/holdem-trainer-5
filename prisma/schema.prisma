datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  email      String    @unique
  username   String
  hash       String?
  googleId   String?   @unique
  isVerified Boolean   @default(false)
  token      String?
  role       String    @default("user")
  membership String    @default("free")
  session    Session?
  settings   Settings?
  folders    Folder[]
  articles   Article[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model Settings {
  id          Int     @id @default(autoincrement())
  manualSizes Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
  userId      Int     @unique
}

model Folder {
  id     Int     @id @default(autoincrement())
  index  Int
  name   String  @default("New Folder")
  user   User    @relation(fields: [userId], references: [id])
  userId Int
  ranges Range[]
}

model Range {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @default("New Range")
  stacks        Float[]  @default([100, 100, 100, 100, 100, 100])
  matrix        Bytes
  folder        Folder   @relation(fields: [folderId], references: [id])
  folderId      Int
  history       Action[] @relation("History")
  options       Action[] @relation("Options")
  successors    Range[]  @relation("Pred-Succ")
  predecessor   Range?   @relation("Pred-Succ", fields: [predecessorId], references: [id])
  predecessorId Int?
}

model Action {
  id             Int    @id @default(autoincrement())
  index          Int
  type           String
  size           Float?
  historyRange   Range? @relation(name: "History", fields: [historyRangeId], references: [id])
  historyRangeId Int?
  optionsRange   Range? @relation(name: "Options", fields: [optionsRangeId], references: [id])
  optionsRangeId Int?
}

model Article {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  isPublished Boolean  @default(false)
  imageUrl    String
  readTime    Int
  level       Int
  category    String
  title       String
  slug        String
  abstract    String
  content     String
}
