datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  email             String            @unique
  username          String
  hash              String?
  googleId          String?           @unique
  isVerified        Boolean           @default(false)
  verificationToken String?           @unique @default(uuid())
  passwordResetCode String?
  role              String            @default("user")
  membership        String            @default("free")
  session           Session?
  settings          Settings?
  folders           Folder[]
  articles          Article[]
  trainingSessions  TrainingSession[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  token     String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model Settings {
  id            Int     @id @default(autoincrement())
  manualSizes   Boolean @default(false)
  sessionLength Int     @default(20)
  user          User    @relation(fields: [userId], references: [id])
  userId        Int     @unique
}

model Folder {
  id     Int     @id @default(autoincrement())
  index  Int
  name   String  @default("New Folder")
  user   User    @relation(fields: [userId], references: [id])
  userId Int
  ranges Range[]
}

model Range {
  id                Int            @id @default(autoincrement())
  index             Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  name              String         @default("New Range")
  stacks            Float[]        @default([100, 100, 100, 100, 100, 100])
  history           String[]       @default([])
  options           String[]       @default(["fold", "call"])
  matrix            Bytes
  folder            Folder         @relation(fields: [folderId], references: [id])
  folderId          Int
  successors        Range[]        @relation("Pred-Succ")
  predecessor       Range?         @relation("Pred-Succ", fields: [predecessorId], references: [id])
  predecessorId     Int?
  trainingUnits     TrainingUnit[]
  featuringArticles Article[]
}

model Article {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  isPublished Boolean  @default(false)
  imageUrl    String
  readTime    Int
  level       Int
  category    String // not used at the moment
  title       String
  slug        String   @unique
  abstract    String
  content     String
  ranges      Range[]
}

model TrainingSession {
  id            String         @id
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  trainingUnits TrainingUnit[]
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
}

model TrainingUnit {
  id                Int             @id @default(autoincrement())
  correct           Int
  total             Int
  complexity        Float
  score             Float
  trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id])
  trainingSessionId String
  range             Range?          @relation(fields: [rangeId], references: [id])
  rangeId           Int?
}
